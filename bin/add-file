#!/usr/bin/perl
# $Id$
#

%type_help = (
    "filename" => "Filename or \"-\" (for stdin/cut-n-paste)",
    "id" => "A simple token",
    "coe" => "'commit', 'op', or 'event'",
    "text" => "Simple ASCII text",
    #"mtext" => "Multi-line text data (end with '.')",
    "yes/no" => "'yes' or 'no'",
);

sub read_mtext {
    my $text;

    print "\nEnter multiple lines; use '.' or '^D' to end; ",
            "~p and ~v are supported\n";
    for (;;) {
	$_ = <STDIN>;
	last if $_ eq undef;
	last if /^\.$/;

	if (/^~p$/) {
	    print "------\n", $text, "(continue)\n";
	} elsif (/^~v/) {
	    my $editor = $'; #';
	    chomp $editor;
	    $editor = $ENV{EDITOR} unless $editor =~ /[a-z]/;

	    my $tmp = "/tmp/add-file.$$";
	    open TMP, ">$tmp" || die;
	    print TMP $text;
	    close TMP;

	    run("$editor $tmp");

	    unless (-z $tmp) {
		open TMP, "<$tmp" || die;
		local $/;
		$text = <TMP>;
		close TMP;
	    }
	    print "(continue)\n";
	} else {
	    $text .= $_;
	}
    }
    return $text;
}

sub prompt {
    my($type, $prompt, $help) = @_;
    my $response;

    reprompt: {
	print "\n", $help if $help;
	print "  [", $type_help{$type}, "]" if $type_help{$type};

	return read_mtext() if $type eq "mtext";
	print "\n  Enter ", $prompt, ": ";

	$response = <STDIN>;
	chomp $response;

	if ($type eq "filename") {
	    if ($response eq "-") {
		$tmp = "/tmp/add-file.$$.${tmpno}";
		$tmpno += 1;
		my $in = read_mtext;
		open TMP, ">$tmp" || die;
		print TMP $in;
		close TMP;
		$response = $tmp;
	    } else {
		if ($response =~ /\[\]\{\}\/\\\*\$\(\)\+/) {
		    print "error: invalid value: $response\n";
		    redo reprompt;
		}

		if ($response =~ /^~\//) {
		    $response =~ s:^~/:${ENV{HOME}}/:;
		}
	    }

	    if ($response && ! -f $response) {
		print "error: file not found\n";
		redo reprompt;
	    }

	} elsif ($type eq "id") {
		if ($response =~ /\[\]\{\}\/\\\*\$\(\)\+/) {
		    print "error: invalid value: $response\n";
		    redo reprompt;
		}
	} elsif ($type eq "coe") {
	    if ($response ne "commit" && $response ne "op"
		    && $response ne "event" && $response ne "import") {
		print "error: invalid value: $response\n";
		print "Please enter 'commit', 'op', or 'event'\n";
		redo reprompt;
	    }
	} elsif ($type eq "text") {
	} elsif ($type eq "yes/no") {
	    if ($response ne "yes" && $response ne "no") {
		print "error: invalid value: $response\n";
		print "Please enter 'yes' or 'no'\n";
		redo reprompt;
	    }
	} else {
	    # no clue
	}
    }

    return $response;
}

sub run {
    print "system: ", join(" ", @_), "\n";
    return !system(@_);
}

$gsite = "https://junoscriptorium.googlecode.com/svn/trunk/";
$gcode = "$gsite junoscriptorium";

sub add_file {
    ($name) = @_;
    print "Welcome to the add-file utility, where you'll answer a number\n";
    print "of questions about the script you are adding.\n\n";

    $rc = $ENV{JUNOSCRIPTORIUMRC};
    $rc = $ENV{HOME} . "/.junoscriptoriumrc" unless -f $rc;
    do $rc if -f $rc;

    print "Checking for a local svn copy of JUNOScriptorium ...\n";
    home: {
	$home = $ENV{JUNOSCRIPTORIUM};
	$home = $ENV{HOME} . "/work/junoscriptorium" unless -d $home;
	if (-d "$home/") {
	    print "Updating $home ... \n";
	    run("cd $home; svn up") || die;
	} else {
	    print "Checking of JUNOScriptorium into $home ...\n";
	    run("mkdir -p $home") || die;
	    $login = prompt("id", "Googlecode Login",
			    "What is your googlecode login name?");

	    run("cd $home/..; svn checkout $gcode --username $login");
	}
	die unless -f "$home/LICENSE";
    }

    print "\nEnter information about the script being added:\n";

    name: {
	$name = prompt("filename", "Script filename",
		       "What is the filename of the script?")
	    unless $name;
	unless (-f $name) {
	    print "file not found: '${name}'\n";
	    undef $name;
	    redo name;
	}

	($path, $basename, $ext) = ($name =~ m:(.*)/([^/]+)\.([^\./]+):);
	($basename, $ext) = ($name =~ m:([^/]+)\.([^\./]+):) unless $basename;
	unless ($basename) {
	    print "could not parse filename\n";
	    undef $name;
	    redo name;
	}

	if ($ext eq "slax") {
	    $alternate = "$path/$basename.xsl";
	    $alternate .= "t" unless -f $alternate;
	    if (-f $alternate) {
		$_ = prompt("yes/no", "'yes' or 'no'",
			    "Use $alternate as an alternate?");
		undef $alternate unless /^y/;
	    } else {
		undef $alternate;
	    }

	} elsif ($ext eq "xsl" || $ext eq "xslt") {
	    $ext = "xsl";

	} else {
	    print "unknown file type (extension)\n";
	    redo name;
	}
	$filename = $basename . "." . $ext;
    }

    author: {
	$author = prompt("id", "Author",
		     "What is the author's identifier (googlecode login)?")
	    unless $author;
	$author = lc $author;
	if ($author =~ /@/) {
	    print "error: do not use an email address, just a bare id\n";
	    undef $author;
	    redo author;
	}
	if ($author =~ / \t/) {
	    print "error: no whitespace in author\n";
	    undef $author;
	    redo author;
	}
    }

    party: {
	$party = prompt("id", "Party",
			"What is the author's affiliation (company name)?")
	    unless $party;
	$party = lc $party;
	if ($party =~ / \t/) {
	    print "error: no whitespace in affiliation\n";
	    undef $party;
	    redo party;
	}
	$party = "juniper" if $party =~ /^juniper/;
    }

    $coe = prompt("coe", "Type",
		  "Is this a 'commit', 'op', or 'event' script?");

    print
"\n\nThe category provides a way of grouping related scripts\
and serves as a directory in the script's path.  The category\
will vary with the type of script, but some examples are:\
---type---  --categories-----\
  commit     interfaces filters system protocols\
    op       display diagnose remote\
  event      snmp traffic\
\nEnter one of the above, or make a new category if needed.\n";

    $category = prompt("id", "Category",
		       "What category does this script belong in?");

    unless (-f $rc) {
	print "Saving data in $rc ...\n";
	open RC, ">$rc" || die;
	print RC "\# .junoscriptoriumrc (built by add-file)\n";
	print RC "\$author = '${author}';\n";
	print RC "\$party = '${party}';\n";
	print RC "1;\n";
	close RC;
    }

    $synopsis = prompt("text", "Synopsis",
		       "What does this script do (a one line overview)?");
    $desc = prompt("mtext", "Description",
        "Give a verbose, detailed description of the script and what it does");

    $more = "";
    $kwhelp = "Enter keywords (blank line when done)";
    for (;;) {
	$_ = prompt(undef, "${more}keywords", $kwhelp);
	last unless $_;
	$keywords .= " " . $_;
	$more = "more ";
	$kwhelp = undef;
    }

    print "\nBasic configuration would be:\n\n", make_example_config(), "\n\n"
	if $coe eq "commit" || $coe eq "op";

    $more = "";
    for (;;) {
	$_ = prompt("yes/no", "'yes' or 'no'", "Are there ${more}examples?");
	last if /^n/;
	$more = "more ";

	$extitle = prompt("text", "Example title",
		     "What is the name of this example?");
	$extitle = "Example" unless $extitle;

	push(@extitle, $extitle);
	$exdesc = prompt("text", "Description",
		       "What does this example show (a one line overview)?");
	push(@exdesc, $exdesc);
	$exconf = prompt("filename", "Configuration file",
		     "What is the name of the configuration file?");
	push(@exconf, $exconf);
	$exin = prompt("filename", "Input file",
		     "What is the name of the input file?");
	push(@exin, $exin);
	$exout = prompt("filename", "Output file",
		     "What is the name of the output file?");
	push(@exout, $exout);
    }

    if ($#extitle < 0 && ($coe eq "commit" || $coe eq "op")) {
	$_ = prompt("yes/no", "'yes' or 'no'",
		    "Do you want a basic config example?");
	if (/^y/) {
	    push(@extitle, "Sample configuration");
	    push(@exdesc, "Configuration for the script $filename");

	    $exconf = make_example_config();

	    $tmp = "/tmp/add-file.$$.${tmpno}";
	    $tmpno += 1;

	    open TMP, ">$tmp" || die;
	    print TMP $exconf;
	    close TMP;
	    push(@exconf, $tmp);
	}
    }

    $relpath = "library/$party/$coe/$category/$basename";
    $fullpath = "$home/$relpath";
    run("mkdir -p $fullpath") || die;

    $out = make_xml_contents();
    open(XML, ">$fullpath/$basename.xml") || die;
    print XML $out;
    close XML;

    run("cp $name $fullpath/$filename") || die;
    run("cp $name $fullpath/$basename.xsl") || die if $alternate;

    # Handle examples
    for ($i = 0; $i <= $#extitle; $i++) {
	my $j = $i + 1;
	run("cp ${exconf[$i]} $fullpath/example-${j}.conf") || die
	    if $exconf[$i];
	run("cp ${exin[$i]} $fullpath/example-${j}.input") || die
	    if $exin[$i];
	run("cp ${exout[$i]} $fullpath/example-${j}.output") || die
	    if $exout[$i];
    }

    # SVN add the new files
    my @rp = split(/\//, $relpath);
    my $rp = "$home";
    foreach my $member (@rp) {
	$rp .= "/" . $member;
	run("cd $home; svn add -N $rp") || die unless -d "$rp/.svn";
    }

    run("cd $home; svn add -N $fullpath/*") || die;
    my $mime = "cd $home; svn propset svn:mime-type";
    run("$mime text/xml $fullpath/$basename.xml") || die;
    run("$mime text/download $fullpath/$basename.$ext") || die;
    run("$mime text/download $fullpath/$basename.xsl") || die
	if $alternate;

    # Check that the author exists
    $adir = "$home/library/$party/Authors";
    $afile = "$adir/$author.xml";
    unless (-f $afile) {
	print "There is no author information for '$author'\n";
	$_ = prompt("yes/no", "'yes' or 'no'", "Add author information?");
	if (/^y/) {
	    $aname = prompt("text", "Author name",
	                   "What is the author's full name?");
	    $company = prompt("text", "Author company",
	                   "Who is the author's employer?");
	    $email = prompt("text", "Author email",
	                   "What is the author's email address?");
	    $location = prompt("text", "Author location",
                      "What is the author's location (city, state, country)?");

	    run("mkdir -p $adir") || die;
	    open(AFILE, ">$afile") || die;
            print AFILE make_xml_author();
            close AFILE;

	    run("cd $home; svn add -N $adir") || die unless -d "$adir/.svn";
	    run("cd $home; svn add -N $afile") || die;
	}
    }

    run("cd $home; svn diff");

    $_ = prompt("yes/no", "'yes' or 'no'",
                "Edit the xml file?");
    if (/^y/) {
	$editor = $ENV{EDITOR} || "vi";
	run("$editor $fullpath/$basename.xml");
	run("cd $home; svn diff");
    }

    $_ = prompt("yes/no", "'yes' or 'no'",
                "Commit these changes?");
    if (/^y/) {
        print "committing changes ...\n";
        run("cd $home; svn commit -m 'Added new script: $basename'") || die;

	$url = "http://junoscriptorium.googlecode.com/svn/trunk/"
	    . $relpath . "/" . $basename . ".xml";

	print "\n\nGo see your new script at:\n", $url, "\n\n";

	$_ = prompt("yes/no", "'yes' or 'no'",
		    "Announce this new script via email?");
	my $out = make_announcement();
	my $subj = "[junoscriptorium] New script: $relpath";
	my $addr = "junoscriptorium\@googlegroups.com";

	if (/^y/) {
	    my $tmp = "/tmp/add-file.$$";
	    open TMP, ">$tmp" || die;
	    print TMP $out;
	    close TMP;
	    run("mail -s '$subj' $addr < $tmp");
	} else {
	    print "(message not sent)\n------\n";
	    print "To: $addr\n";
	    print "Subject: $subj\n\n";
	    print $out;
	}
    }

    exit 0;
}

main: {
    if ($#ARGV < 0) {
	add_file;
    }

    while ($#ARGV >= 0) {
	add_file(shift @ARGV);
    }
}

sub make_xml_contents {
    my $value =
"<?xml version=\"1.0\"?>\
<script>\
  <title>$filename</title>";

    $value .= "  <alternate>$basename.xsl</alternate>" if $alternate;

    $value .= "\
  <author>$author</author>\
  <synopsis>\
	$synopsis\
  </synopsis>\
  <coe>$coe</coe>\
  <type>$category</type>\
\
  <description>\
$desc\
  </description>\n\n";

    if ($keywords) {
	foreach my $kw (split(/ /, $keywords)) {
	    $value .= "  <keyword>$kw</keyword>\n" if $kw;
	}
    }

    for ($i = 0; $i <= $#extitle; $i++) {
	$value .= "  <example>\n";
	$value .= "    <title>${extitle[$i]}</title>\n";
	$value .= "    <description>${exdesc[$i]}</description>\n"
	    if $exdesc[$i];
	my $j = $i + 1;
	$value .= "    <config>example-${j}.conf</config>\n" if $exconf[$i];
	$value .= "    <input>example-${j}.input</input>\n" if $exin[$i];
	$value .= "    <output>example-${j}.output</output>\n" if $exout[$i];
	$value .= "  </example>\n";
    }

    $value .= "\
  <xhtml:script xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"\
                src=\"../../../../../web/leaf.js\" \
	        type=\"text/javascript\"/>\
</script>\n";

    return $value;
}

sub make_xml_author {
    my $value = "<?xml version=\"1.0\"?>\n<author>\n";
    $value .= "  <full-name>$aname</full-name>\n" if $aname;
    $value .= "  <company>$company</company>\n" if $company;
    $value .= "  <email>$email</email>\n" if $email;
    $value .= "  <location>$location</location>\n" if $location;
    $value .= "</author>\n";
    return $value;
}

sub make_example_config {
    my $value =
"system {\
    scripts {\
        $coe {\
            file $filename";

    if ($synopsis) {
	$value .= " {\n                description \"$synopsis\";\n";
	$value .= "            }\n";
    } else {
	$value .= ";\n";
    }

    $value .=
"        }\
    }\
}\n";

    return $value;
}

sub make_announcement {
    my $value =
"$relpath\
\
$author has committed a new file to the junoscriptorium repository.\
Please take a look, comment, and enjoy!\
\
$url\
\
$desc\
\
Enjoy,\
 The JUNOScriptorium Community (via add-file)\n\n";

    return $value;
}

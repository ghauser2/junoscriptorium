/*
 * Author        : Curtis Call
 * Version       : 1.0
 * Last Modified : November 10, 2009
 * Platform      : all
 * Release       : 10.0 and above
 * Description: This script installs the expand-interace-ranges script by writing
 * it to all chassis routing-engines and enabling it in the configuration.
 *
 * Not supported on J/SRX chassis clusters.
 *
 * License       : BSD-Style
 *  Copyright (c) 2009 Curtis Call. All Rights Reserved.
 *  Redistribution and use in source and binary forms, with or without modification, 
 *  are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright notice, this 
 *  list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice, 
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products derived 
 *  from this software without specific prior written permission.
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED 
 *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 *  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE 
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN 
 *  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 
version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

match / {

    /* Get confirmation */
    var $string = "This script writes the expand-interface-ranges script to all routing-engines\n" _
                  "and enables it in the configuration.  Performing these actions requires\n" _
                  "super-user access or the maintenance permission bit.\n" _
                  "Would you like to continue? (yes/no)";
    var $answer =  jcs:get-input( $string );
    if( $answer == "yes" ) {
        
        /* Check configuration, verify that commit synchronize is set.  If not then exit and complain */
        var $re-info = jcs:invoke( "get-route-engine-information" );
        var $vc-info = jcs:invoke( "get-virtual-chassis-information" );
        if( count( $re-info/route-engine ) > 1 || count( $vc-info/member-list/member ) > 1 ) {
            var $configuration-rpc = <get-configuration database="committed" inherit="inherit">;
            var $configuration = jcs:invoke( $configuration-rpc );
            if( jcs:empty( $configuration/system/commit/synchronize ) ) {
                <xsl:message terminate="yes"> "The expand-interface-ranges script requires that multiple-RE systems have 'system commit synchronize' enabled.";
            }
        }
        
        /* Script directory differs based on type */
        var $directory = {
            if( starts-with( $product, "ex" ) ) {
                expr "/config/db/scripts/commit/";
            }
            else {
                expr "/var/run/scripts/commit/";
            }
        }
        
        /* Put file on local RE */
        expr jcs:output( " \nWriting script to local re..." );
        /* Put the file there */
        var $file-put-rpc = {
            <file-put> {
                <filename> $directory _ $script-name;
                <encoding> "base64";
                <permission> "644";
                <delete-if-exist>;
                <file-contents> $embedded-script-file;
            }
        }
        var $put-results = jcs:invoke( $file-put-rpc );
        if( $put-results/..//xnm:error ) {
            for-each( $put-results/..//xnm:error ) {
                expr jcs:output( message );
            }
            <xsl:message terminate="yes"> "Error writing script to local re.";
        }
        expr jcs:output("[Success]");
        
        /* Verify the checksum */
        expr jcs:output( "Checking checksum on local re..." );
        var $checksum-rpc = {
            <get-checksum-information> {
                <path> $directory _ $script-name;
            }
        }
        var $checksum-results = jcs:invoke( $checksum-rpc );
        if( $checksum-results/..//xnm:error ) {
            for-each( $checksum-results/..//xnm:error ) {
                expr jcs:output( message );
            }
            <xsl:message terminate="yes"> "Error computing checksum on local re.";
        }
        var $checksum = $checksum-results/file-checksum/checksum;
        /* Compare the checksums */
        if( $checksum != $file-checksum ) {
            <xsl:message terminate="yes"> "Invalid checksum.  Embedded: " _ $file-checksum _ " New File: " _ $checksum;
        }
        
        expr jcs:output("[Success]");

        /* Generate list of other routing-engines */
        var $target-set := {
            if( starts-with( $product, "ex42")  && count( $vc-info/member-list/member ) > 1 ) {
                /* Copy to non-local FPCs */
                for-each( $vc-info/member-list/member ) {
                    if( not( contains( member-role, "*" ) ) ) {
                        <target> "fpc" _ member-id;
                    }
                }
            }
            else {
                /* Copy to non-local REs */
                for-each( $re-info/route-engine ) {
                    if( jcs:empty( load-average-one ) ) {
                        <target> "re" _ slot;
                    }
                }
            }
        }

        /* Copy to non-local routing-engines */
        for-each( $target-set/target ) {

            expr jcs:output( " \nCopying script to ", ., "..." );
        
            var $file-copy-rpc = {
                <file-copy> {
                    <source> $directory _ $script-name;
                    <destination> . _ ":" _ $directory _ $script-name;
                }
            }
            var $copy-results = jcs:invoke( $file-copy-rpc );
            if( $copy-results/..//xnm:error ) {
                for-each( $copy-results/..//xnm:error ) {
                    expr jcs:output( message );
                }
                <xsl:message terminate="yes"> "Error copying script to " _ .;
            }
            
            expr jcs:output("[Success]");
            
            /* Verify the checksum */
            expr jcs:output( "Checking checksum on ", ., "..." );
            var $checksum-rpc2 = {
                <get-checksum-information> {
                    <path> . _ ":" _ $directory _ $script-name;
                }
            }
            var $checksum-results2 = jcs:invoke( $checksum-rpc2 );
            if( $checksum-results2/..//xnm:error ) {
                for-each( $checksum-results2/..//xnm:error ) {
                    expr jcs:output( message );
                }
                <xsl:message terminate="yes"> "Error computing checksum on " _ .;
            }
            var $checksum2 = $checksum-results2/file-checksum/checksum;
            /* Compare the checksums */
            if( $checksum2 != $file-checksum ) {
                <xsl:message terminate="yes"> "Invalid checksum.  Embedded: " _ $file-checksum _ " New File: " _ $checksum2;
            }
            
            expr jcs:output("[Success]");
        }
            
        /* Enable the commit script in the configuration */
        expr jcs:output(" \nEnabling script in configuration...");
        var $connection = jcs:open();
        /* Lock configuration */
        var $lock-results = jcs:execute( $connection, "lock-configuration" );
        if( $lock-results/..//xnm:error ) {
            for-each( $lock-results/..//xnm:error ) {
                expr jcs:output( message );
            }
            expr jcs:close( $connection );
            <xsl:message terminate="yes"> "Could not lock configuration database.";
        }
        var $load-configuration-rpc = {
            <load-configuration> {
                <configuration> {
                    <system> {
                        <scripts> {
                            <commit> {
                                <file> {
                                    <name> $script-name;
                                }
                            }
                        }
                    }
                }
            }
        }
        /* Load configuration */
        var $load-results = jcs:execute( $connection, $load-configuration-rpc );
        if( $load-results/..//xnm:error ) {
            for-each( $load-results/..//xnm:error ) {
                expr jcs:output( message );
            }
            expr jcs:execute( $connection, "unlock-configuration" );
            expr jcs:close( $connection );
            <xsl:message terminate="yes"> "Could not load configuration change.";
        }
        /* Commit configuration */
        var $commit-configuration-rpc = {
            <commit-configuration> {
                <synchronize>;
            }
        }
        var $commit-results = jcs:execute( $connection, $commit-configuration-rpc );
        if( $commit-results/..//xnm:error ) {
            for-each( $commit-results/..//xnm:error ) {
                expr jcs:output( message );
            }
            expr jcs:execute( $connection, "unlock-configuration" );
            expr jcs:close( $connection );
            <xsl:message terminate="yes"> "Could not commit configuration change.";
        }
        /* Unlock configuration */
        var $unlock-results = jcs:execute( $connection, "unlock-configuration" );
        if( $unlock-results/..//xnm:error ) {
            for-each( $unlock-results/..//xnm:error ) {
                expr jcs:output( message );
            }
            expr jcs:close( $connection );
            <xsl:message> "Could not unlock configuration.";
        }
        expr jcs:close( $connection );
        
        expr jcs:output("[Success]");
        
        /* Final success message */
        expr jcs:output(" \n", $script-name, " was installed successfully" );
    }
}

/* Parameters used to write and check the script file */
var $script-name = "expand-interface-ranges.slax";
var $file-checksum = "ae6f22a3fe11d0454358b3d192706003"; 
var $embedded-script-file = "";

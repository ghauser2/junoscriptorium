<?xml version="1.0"?>
<script version="0.1">
  <title>ex-loop.slax</title>
  <alternate>ex-loop.xsl</alternate>
  <author>phil</author>
  <synopsis>
    Use apply-macro to define a sequence of logical interfaces
  </synopsis>
  <keyword>loop</keyword>
  <keyword>recursive</keyword>
  <keyword>recurse</keyword>
  <keyword>XSL</keyword>

  <description>
    An apply-macro is defined, which has the name of a physical
    interface, and a set of parameters that request a number of
    logical units to be defined for that physical interface.  The
    units are numbered sequentially from $unit to $max, and are
    given IP addresses starting a $address.
  </description>
  <implementation>
    This example shows both the strengths and weaknesses of XSL.
    To loop thru the logical units, XSL must use recursion, which
    is implemented in the "emit-interface" template.

    Calculating the next address is done in the "next-address" template,
    where the nature of XSL and it's shallow data types, weak programming
    structures, and verbosity are full exposed.
  </implementation>

  <example>
    <config>ex-loop.conf</config>
    <output>ex-loop.output</output>
  </example>
  <xhtml:script xmlns:xhtml="http://www.w3.org/1999/xhtml"
                src="../../../../../web/leaf.js" type="text/javascript"/>
</script>

/*
*
*    NAME: syslog-int-desc-on-link-change.slax
*    PURPOSE: The requirement is that when a link status changes
*             from up to down or down to up, send a syslog messsage
*             with the interface description. You can also gererate
*             a new SNMP trap based on the newly created syslog 
*             message.
*
*    CREATED: 09/15/11
*    BY: Robert Delancy (Systems Engineer - Juniper Networks)
*    LAST MOD: 09/19/11
*    BY: Robert Delancy
*    VERSION: 1.01 
*
*    MODIFICATION HISTORY:
*        V1.00 = Initial release
*        V1.01 = Adjusted show interface variables to support SNMP
*                function
*
*/ 
version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

/*
*
* This event script will gererate a new syslog message based on the triggering 
* syslog message of SNMP_TRAP_LINK_DOWN or SNMP_TRAP_LINK_UP. It collects the
* related interface information from the syslog message and also grabs the 
* interface decription to form a new syslog message.
*
*/

/*
*
* To invoke this event script, place the syslog-interface-description-on-
* link-change.slax file in /var/db/scripts/event/ and enter the following 
* into the device config.
* The second policy is to also create a trap on the newly created syslog
* message.
*
* ----Begin config snippet---- 
*
* root@JUNIPER_DEVICE# show event-options
* policy sylog_if_description {
*     events [ snmp_trap_link_up snmp_trap_link_down ];
*     then {
*         event-script syslog-int-desc-on-link-change.slax;
*     }
* }
* policy snmptrap_if_description {
*     events SYSTEM;
*     attributes-match {
*         SYSTEM.message matches NEW_SNMP_TRAP_LINK;
*     }
*     then {
*         raise-trap;
*     }
* }
* event-script {
*     file syslog-int-desc-on-link-change.slax;
* }
*
* ----End config snippet----
*
*/

/*
*
*  Capture the arguments from the triggering event that will be passed into the script.
*
*/

match / {
<event-script-input> {

        /* Record the syslog message */
	var $message = event-script-input/trigger-event/message;

        /* Record the syslog facility */
        var $facility = event-script-input/trigger-event/facility;

        /* Record the syslog severity */
        var $severity = event-script-input/trigger-event/severity;

        /* Record the triggering event */
        var $trigger = event-script-input/trigger-event/id;

        /* Record the syslog interface name */
        var $int-name = event-script-input/trigger-event/attribute-list/
	attribute[name=="interface-name"]/value; 

        /* Record the syslog hostname */
        var $hostname = event-script-input/trigger-event/hostname;

/*
*
* Get the interface descriptions
*
/*

        /* Record the infterface desctiption */
        /* 
	*old way to do it	
	* var $rpc =  <command> 'show interfaces descriptions ' _ $int-name;
	*  var $ifdesc-out = jcs:invoke($rpc);
	*/

	/*new way to do it*/
	var $rpc = {
		<get-interface-information> {
			<descriptions>;
			<interface-name> $int-name;
		}
	}
        var $ifdesc-out = jcs:invoke($rpc);
		 
var $description = {
	if ( not ( jcs:empty($ifdesc-out/logical-interface/description) ) ) {
		expr $ifdesc-out/logical-interface/description;
	}
	else if ( not ( jcs:empty($ifdesc-out/physical-interface/description) ) ) {
		expr $ifdesc-out/physical-interface/description;
        }
      }

var $admin-status = {
        if ( not ( jcs:empty($ifdesc-out/logical-interface/admin-status) ) ) {
                expr $ifdesc-out/logical-interface/admin-status;
        }
        else if ( not ( jcs:empty($ifdesc-out/physical-interface/admin-status) ) ) {
                expr $ifdesc-out/physical-interface/admin-status;
        }
      }

var $oper-status = {
        if ( not ( jcs:empty($ifdesc-out/logical-interface/oper-status) ) ) {
                expr $ifdesc-out/logical-interface/oper-status;
        }
        else if ( not ( jcs:empty($ifdesc-out/physical-interface/oper-status) ) ) {
                expr $ifdesc-out/physical-interface/oper-status;
        }
      }

var $phyname = {
        if ( not ( jcs:empty($ifdesc-out/logical-interface/name) ) ) {
                expr $ifdesc-out/logical-interface/name;
        }
        else if ( not ( jcs:empty($ifdesc-out/physical-interface/name) ) ) {
                expr $ifdesc-out/physical-interface/name;
        }
      }

/*
*
* Create syslog facility.severity 
*
/*

        /* Assemble the facility-sevrity string */        
        var $facility-severity = $facility _ "." _ $severity;

/*
*
* Assemble new syslog message
*
/* 
        
         /* Create new syslog message */
        var $new_message = "NEW_" _ $trigger _ ", " _ $hostname _ ", " _ $phyname _ ", " _ $admin-status _ ", " _ $oper-status _ ", " _ $description;
     
/*
*
* Generate newly assembled message
*
/*
 
        /*  Create syslog message */  
        expr jcs:syslog( $facility-severity, $new_message);
   }
}

/*
 * Author        : Curtis Call
 * Version       : 1.2
 * Last Modified : September 20, 2012
 * Platform      : all
 * Release       : 10.0 and above
 * Description: The expand-interace-ranges script alters the behavior of the 
 * interface-range configuration statement.  Rather than remaining a permanent
 * part of the configuration, the range is instead expanded by copying its 
 * contents into the indicated member interface configurations.  The range is
 * also removed at commit time.
 *
 * Interface-ranges that do not have any configuration included other than interface
 * members will not be expanded.  Also, any interface-ranges that have the apply-macro
 * "do-not-expand" configured will not be expanded.
 *
 * The interface selection process differs from that used normally by the interface-
 * range command.  Any currently installed interface, or interface that appears within
 * the configuration, will be considered as a possible target of an expanded interface-
 * range.
 * 
 * Revisions:
 *     1.1 - Added support for numeric ranges when using the member statement. Must be
 *     from 0 to 99. e.g. ge-0/0/[1-41]
 *     1.2 - Added support for comma ranges when using the member statement. [1,3,5] etc
 *
 * License       : BSD-Style
 *  Copyright (c) 2012 Curtis Call. All Rights Reserved.
 *  Redistribution and use in source and binary forms, with or without modification, 
 *  are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright notice, this 
 *  list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice, 
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products derived 
 *  from this software without specific prior written permission.
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED 
 *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 *  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE 
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN 
 *  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 
version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns str = "http://exslt.org/strings";
ns set = "http://exslt.org/sets";

import "../import/junos.xsl";

/* Fake boolean values */
var $true = "true";
var $false = "false";

/* Macro */
var $do-not-expand-macro = "do-not-expand";

match configuration {

    /*
     * Ranges are only expanded if they have configuration statements other than members and member-range, and they 
     * do not have apply-macro do-not-expand configured.
     */
    var $interface-ranges = interfaces/interface-range[ jcs:empty( apply-macro[name == $do-not-expand-macro] ) ]
                                                      [ not( jcs:empty( child::*[name() != "name" && name() != "member-range" && name() != "member"] ) ) ];
    
    /* No processing unless an interface-range exists */
    if( $interface-ranges ) {
    
        /* Multi-RE box? - require forced synchronization */
        var $re-info = jcs:invoke( "get-route-engine-information" );
        var $vc-info = jcs:invoke( "get-virtual-chassis-information" );
        var $missing-config = {
            if( count( $re-info/route-engine ) > 1 || count( $vc-info/member-list/member ) > 1 ) {
                
                /* system commit synchronize is required */
                if( jcs:empty( system/commit/synchronize ) ) {
                    expr $true;
                }
                else {
                    expr $false;
                }
            }
            else {
                expr $false;
            }
        }
        
        /* 
         * If config is missing then show a warning and do nothing.  Do not show an error because we don't want
         * to interfere with the commit process.
         */
        if( $missing-config == $true ) {
            <xnm:warning> {
                <message> "The expand-interface-ranges script requires that multiple-RE systems have 'system commit synchronize' enabled."; 
            }
        }
        else {
        
            /* Get interface names */
            var $interface-rpc = {
                <get-interface-information> {
                    <terse>;
                }
            }
            var $interfaces = jcs:invoke( $interface-rpc );
            var $interface-config = interfaces;
            /*
             * Go through each range and expand it into the appropriate interfaces
             */
            var $interface-changes := {
                for-each( $interface-ranges ) {
                    
                    /* Get the interfaces to expand into */
                    var $interface-set := { call get-interfaces( $interfaces, $interface-range = ., $interface-config ); }
                    
                    var $range-configuration = ./*[name() != "name" && name() != "member-range" && name() != "member"];
                    
                    /* Describe the change that is taking place */
                    <xnm:warning> {
                        <message> "Expanding/removing interface-range " _ name _ " (" _ count( $interface-set/interface ) _ " interfaces altered)";
                    }
                    
                    /* Create changes for the interfaces with the relevant configuration */
                    for-each( $interface-set/interface ) {
                        <interface> {
                            <name> .;
                            copy-of $range-configuration;
                        }
                    }
                    
                    /* Create interface-range deletion change */
                    <interface-range delete="delete"> {
                        <name> name;
                    }
                }
            }

            /* Display any warnings */
            for-each( $interface-changes/xnm:warning ) {
                copy-of .;
            }
            
            /* If there are changes present, then bundle them all into a single change */
            if( count( $interface-changes/interface | $interface-changes/interface-range ) > 0 ) {
                <change> {
                    <interfaces> {
                        copy-of $interface-changes/interface;
                        copy-of $interface-changes/interface-range;
                    }
                }
            }
        }
    }
}

/*
 * This template returns the names of the interfaces that match the member and
 * member-range statements included within the $interface-range.  $interfaces
 * is the contents of show interfaces terse and reflects the current installed
 * interfaces.  $interface-config points to the interfaces configuration stanza
 * and references both installed and uninstalled interfaces.  Both pools are drawn
 * from when determining what interfaces match a range.
 * Returned data is in the form <interface> name;
 */
template get-interfaces( $interfaces, $interface-range, $interface-config ) {

    /* Gather all possible interface names first */
    var $all-members := {
        /* Process each member statement */
        for-each( $interface-range/*[name() == "member"] ) {
        
            /* Replace any dash ranges [#-#] */
            var $modified-interface-1 = { call replace-dash-ranges( $interface = name ); }
            /* Replace any comma ranges [#,#] */
            var $modified-interface-2 = { call replace-comma-ranges( $interface = $modified-interface-1 ); }
            
            /* Figure out what $interfaces match based on the regex */
            var $regex = concat( str:replace( $modified-interface-2, "*", ".*" ), "$");
            /* Check installed interfaces */
            for-each( $interfaces/physical-interface/name ) {
                var $name = .;
                var $result = jcs:regex( $regex, $name );
                if( $result[. == $name] ) {
                    <interface> $name;
                }
            }
            /* Check configured interfaces */
            for-each( $interface-config/interface ) {
                var $name = name;
                var $result = jcs:regex( $regex, $name );
                if( $result[. == $name] ) {
                    <interface> $name;
                }
            }
        }
        /* Process each member range statement */
        for-each( $interface-range/*[name() == "member-range"] ) {
            /* start interface */
            var $start = name;
            /* end interface */
            var $end = end-range;
            /* Check installed interfaces */
            for-each( $interfaces/physical-interface/name ) {
                var $name = .;
                var $after = { call is-interface-after( $interface = $name, $after-interface = $start ); }
                var $before = { call is-interface-before( $interface = $name, $before-interface = $end ); }
                if( ( $start == $name || $after == $true ) && ( $end == $name || $before == $true ) ) {
                    <interface> $name;
                }
            }
            /* Check configured interfaces */
            for-each( $interface-config/interface ) {
                var $name = name;
                var $after = { call is-interface-after( $interface = $name, $after-interface = $start ); }
                var $before = { call is-interface-before( $interface = $name, $before-interface = $end ); }
                if( ( $start == $name || $after == $true ) && ( $end == $name || $before == $true ) ) {
                    <interface> $name;
                }
            }
        }
    }
    
    /* Get uniques */
    copy-of set:distinct( $all-members/interface );
}


/* 
 * Determine if interface comes after a separate interface (in numerical order) or
 * not.  Returns false boolean values $true or $false
 */
template is-interface-after( $interface, $after-interface ) {

    /* Only check if interface type is equal */
    var $type = substring-before( $interface, "-" );
    var $after-type = substring-before( $after-interface, "-" );
    
    if( $type == $after-type ) {
        /* Pull out fpcs, pics, etc */
        var $fpc = substring-before( substring-after( $interface, "-" ), "/" );
        var $pic = substring-before( substring-after( $interface, "/" ), "/" );
        var $final-part = substring-after( $interface, "/" );
        var $port = substring-after( $final-part, "/" );
        var $after-fpc = substring-before( substring-after( $after-interface, "-" ), "/" );
        var $after-pic = substring-before( substring-after( $after-interface, "/" ), "/" );
        var $after-final-part = substring-after( $after-interface, "/" );
        var $after-port = substring-after( $after-final-part, "/" );
        
        /* If FPC is less then it is false */
        if( $fpc < $after-fpc ) {
            expr $false;
        }
        /* If FPC is more then it is true */
        else if( $fpc > $after-fpc ) {
            expr $true;
        }
        /* Same FPC, check PIC and port */
        else {
            /* If PIC is less then it is false */
            if( $pic < $after-pic ) {
                expr $false;
            }
            /* If PIC is more then it is true */
            else if( $pic > $after-pic ) {
                expr $true;
            }
            /* Same PIC, check port */
            else {
                /* Port is less or equal, it is false */
                if( $port <= $after-port ) {
                    expr $false;
                }
                /* Port is greater, it is true */
                else {
                    expr $true;
                }
            }
        }
    }
    else {
        expr $false;
    }
}

/* 
 * Determine if interface comes before a separate interface (in numerical order) or
 * not.  Returns false boolean values $true or $false
 */
template is-interface-before( $interface, $before-interface ) {

    /* Only check if interface type is equal */
    var $type = substring-before( $interface, "-" );
    var $before-type = substring-before( $before-interface, "-" );
    
    if( $type == $before-type ) {
        /* Pull out fpcs, pics, etc */
        var $fpc = substring-before( substring-after( $interface, "-" ), "/" );
        var $pic = substring-before( substring-after( $interface, "/" ), "/" );
        var $final-part = substring-after( $interface, "/" );
        var $port = substring-after( $final-part, "/" );
        var $before-fpc = substring-before( substring-after( $before-interface, "-" ), "/" );
        var $before-pic = substring-before( substring-after( $before-interface, "/" ), "/" );
        var $before-final-part = substring-after( $before-interface, "/" );
        var $before-port = substring-after( $before-final-part, "/" );
        
        /* If FPC is more then it is false */
        if( $fpc > $before-fpc ) {
            expr $false;
        }
        /* If FPC is less then it is true */
        else if( $fpc < $before-fpc ) {
            expr $true;
        }
        /* Same FPC, check PIC and port */
        else {
            /* If PIC is more then it is false */
            if( $pic > $before-pic ) {
                expr $false;
            }
            /* If PIC is less then it is true */
            else if( $pic < $before-pic ) {
                expr $true;
            }
            /* Same PIC, check port */
            else {
                /* Port is more or equal, it is false */
                if( $port >= $before-port ) {
                    expr $false;
                }
                /* Port is less, it is true */
                else {
                    expr $true;
                }
            }
        }
    }
    else {
        expr $false;
    }
}

/*
 * Replace any comma ranges with regex patterns
 */
template replace-comma-ranges( $interface ) {
    /* Scan for comma within brackets */
    var $comma-range = jcs:regex( "[[]([[:digit:]]{1,2},)+[[:digit:]]{0,2}[]]", $interface );
    
    if( count( $comma-range ) > 0 ) {
        /* Strip off the brackets */
        var $inside = substring-before( substring-after( $comma-range[1], "[" ), "]" );
        
        /* Grab all the numbers */
        var $numbers = jcs:split( ",", $inside );
        
        /* We don't want any blanks */
        var $non-blank-numbers := {
            for-each( $numbers ) {
                if( string-length( . ) > 0 ) {
                    <number> .;
                }                
            }
        }
        
        /* Create new range using parenthesis and pipes */
        var $new-inside = {
            expr "(";
            for-each( $non-blank-numbers/number ) {
                expr "(" _ . _ ")";
                if( position() != last() ) {
                    expr "|";
                }
            }
            expr ")";
        }
        
        var $new-interface = str:replace( $interface, $comma-range[1], $new-inside );
        
        call replace-comma-ranges( $interface = $new-interface );
    }
    else {
        expr $interface;
    }
}

/*
 * Replace any dash ranges with regex patterns
 */
template replace-dash-ranges( $interface ) {
    /* Scan for dash within brackets with at least one two digit number */
    var $dash-range = jcs:regex( "[[][[:digit:]]{1,2}-[[:digit:]]{2}[]]", $interface );
    
    if( count( $dash-range ) > 0 ) {

        var $pattern = { call convert-range-to-pattern( $range = $dash-range[1] ); } 
        var $new-interface = str:replace( $interface, $dash-range[1], $pattern );
        
        call replace-dash-ranges( $interface = $new-interface );
    }
    else {
        expr $interface;
    }
}

/*
 * Converts number ranges in the format [#-#] into valid regex patterns.
 * Supports an incrementing range from 0 to 99.
 * i.e. [1-9] just becomes [1-9], but [1-11] becomes (([1-9])|(1[0-1]))
 */
template convert-range-to-pattern( $range ) {

    /* Compute low number and high number */
    var $low-number = normalize-space( substring-before( substring-after( $range, "["), "-" ) );
    var $high-number = normalize-space( substring-before( substring-after( $range, "-"), "]" ) );
    
    /* Exit if invalid */
    if( string( number( $low-number ) ) == "NaN" || string( number( $high-number ) ) == "NaN" ||
        $low-number > $high-number || $low-number < 0 || $high-number > 99 ) {
    
        <xsl:message terminate="yes"> "Invalid range: " _ $range;
    }
    
    /* If numbers are the same or both are less than ten then just use the existing range string */
    if( $low-number == $high-number || ( $low-number < 10 && $high-number < 10 ) ) {
        expr $range;
    }
    else {
    
        /* Otherwise, start the regex pattern */
        expr "(";
    
        /* Convert into tens and ones */
        var $low-tens = {
            if( $low-number >= 10 ) {
                expr ( floor( $low-number div 10 ) );
            }
            else {
                expr "0";
            }
        }
        var $low-ones = $low-number mod 10;
    
        var $high-tens = {
            if( $high-number >= 10 ) {
                expr ( floor( $high-number div 10 ) );
            }
            else {
                expr "0";
            }
        }
        var $high-ones = $high-number mod 10;

        /* Start processing range patterns */
        call do-low-range( $low-tens, $low-ones, $high-tens, $high-ones );
    
        /* End the regex pattern */
        expr ")";
    }
}

template do-low-range( $low-tens, $low-ones, $high-tens, $high-ones ) {

    /* If low and high tens are the same then just output the range */
    if( $low-tens == $high-tens ) {
        /* The tens cannot be zero, so assume there is a value there */
        expr "(" _ $low-tens;
        
        /* If both are the same then just dump the number, otherwise do a range */
        if( $low-ones == $high-ones ) {
            expr $low-ones;
        }
        else {
            expr "[" _ $low-ones _ "-" _ $high-ones _ "]";
        }
        
        expr ")";
    }
    else {
        /* Process a range for just the low number */
        expr "(";
        if( $low-tens > 0 ) {
            expr $low-tens;
        }
        
        /* Only do a range if there is a range */
        if( $low-ones == 9 ) {
            expr $low-ones;
        }
        else {
            expr "[" _ $low-ones _ "-9]";
        }
        expr ")";

        /* Insert a pipe */
        expr "|";
        
        /* Move up by ten and process again */
        call do-low-range( $low-tens = $low-tens + 1, $low-ones = 0, $high-tens, $high-ones );
    }
}

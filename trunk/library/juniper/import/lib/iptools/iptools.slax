version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns logical = "http://iptools.net/logical";
ns bitwise = "http://iptools.net/bitwise";
ns binary = "http://iptools.net/binary";
ns circuit = "http://iptools.net/circuit";
ns iptools = "http://iptools.net/iptools";

import "../import/junos.xsl";

/* 06/16/11 - This file is a partial collection of templates needed to 
 * perform operations on IP addresses.  After conversion from the 
 * original XSLT is complete it will contain templates as described below. 
 * 
 *
 * ==ns logical==
 *
 * The classic seven bit logic operations. AND, OR, XOR, NAND, NOR, 
 * XNOR, and NOT.
 *
 * ==ns bitwise==
 * 
 * Bit logic operations for strings of "1"s and "0s"
 *
 * ==ns binary==
 *
 * Templates to convert decimal to binary, IPv4 and IPv6 to binary, prefix lengths, 
 * etc to binary and back.  
 *
 * ==ns circuit==
 *
 * Templates that emulate IC logic.  Half- and full-adders,
 * adder-subtractor, and an IP summarization ALU.
 *
 * ==ns iptools==
 * 
 * This is the top level collection of templates.  Here there are templates
 * to get the next or the previous IP address or IP subnet.  There is a high-level
 * wrapper for the IP summarization ALU.
 */
 


template binary:bin2ipv4 ($binA) {
	call binary:bin2dec ($binA = substring($binA, 1, 8));
	expr ".";
	call binary:bin2dec ($binA = substring($binA, 9, 8));
	expr ".";
	call binary:bin2dec ($binA = substring($binA, 17, 8));
	expr ".";
	call binary:bin2dec ($binA = substring($binA, 25, 8));
	expr "/";		
	call binary:bin2pre ($binA = substring-after($binA, "/"));
}


template binary:ipv42bin ($ipA) {
	var $xip = {
		if (contains($ipA, "/")) {
			expr $ipA;
		} else {
			expr $ipA _ "/32";
		}
	}
	
	var $octet1 = substring-before($xip, ".");
	var $octet2 = substring-before(substring-after($xip, "."), ".");
	var $octet3 = substring-before(substring-after(substring-after($xip, "."), "."),".");
	var $octet4 = substring-before(substring-after(substring-after(substring-after($xip, "."),"."),"."),"/");
	var $prelen = substring-after($xip, "/");
	
	if ($octet1 >= 0 and $octet1 <= 255 and
	    $octet2 >= 0 and $octet2 <= 255 and
	    $octet3 >= 0 and $octet3 <= 255 and
	    $octet4 >= 0 and $octet4 <= 255 and	    	    
         $prelen >= 1 and $prelen <= 32) {
         
	    call binary:dec2bin($dec = $octet1);
    	    call binary:dec2bin($dec = $octet2);
    	    call binary:dec2bin($dec = $octet3);
    	    call binary:dec2bin($dec = $octet4);    	        	    
    	    
    	    expr "/";
    	    
    	    call binary:pre2bin($prelen = $prelen);
	    
     }	
}

template binary:pre2bin($prelen = "32", $acc = "32") {
	expr number($prelen > 0);
	if ($acc > 1) {
		call binary:pre2bin($prelen = $prelen - number($prelen > 0), $acc = $acc - 1);
	}
}

template binary:bin2pre($binA) {
	expr string-length(substring-before($binA, "0"));
}


template binary:dec2bin ($dec, $width = "8", $acc) {
	var $x = $dec mod 2;

	if ($width == 1) {
		expr $x _ $acc;
	} else {
		var $y = ($dec - $x) div 2;
		call binary:dec2bin ($dec = $y, $width = $width - 1, $acc = $x _ $acc);
	}
}

template binary:bin2dec ($binA, $acc = "0", $inc = "1") {
	var $x = substring($binA, string-length($binA), 1) * $inc + $acc;
	if (string-length($binA) == 1) {
		expr $x;
	} else {
		call binary:bin2dec ($binA = substring ($binA, 1, string-length($binA) -1 ), $acc = $x, $inc = $inc *2 );
	}
}




template binary:alu ( $binA = "0", $binB = "0", $ctrl = "0", $carryIn = $ctrl, $acc = "" ) {

	/* This template simulates a basic adder-subtractor ALU.
	 * $binA and $binB are strings of "1"s and "0"s and are assumed to be the same length.
	 * $ctrl determines whether we are adding or subtracting, 0 = add 1 = subtract.
	 * $carryIn and $acc are called on recursion.
	 */

	var $x = { call logical:xor ( $bitA = substring($binB, string-length($binB), 1),
	                              $bitB = $ctrl); }
	                              
	var $y = { call circuit:full-adder ( $bitA = substring ($binA, string-length($binA), 1),
	                                     $bitB = $x, $carryIn = $carryIn ) ; }
     
    
     if (string-length($binA) == 1) {
		var $overflow = { call logical:xor ($bitA = substring($y,1,1), $bitB = $ctrl); }
		if ($overflow == "1") {
			expr "OVERFLOW";
		} else {
			expr substring ($y, 2, 1) _ $acc;
		}

     } else {
     	call binary:alu ($binA = substring($binA, 1, string-length($binA) - 1),
     	                 $binB = substring($binB, 1, string-length($binB) - 1),
     	                 $ctrl = $ctrl,
     	                 $carryIn = substring($y,1,1),
     	                 $acc = substring($y,2,1) _ $acc );
     }
}

template circuit:half-adder ( $bitA = "0", $bitB = "0" ) {

	var $s = { call logical:xor ( $bitA = $bitA, $bitB = $bitB ); }
	var $c = { call logical:and ( $bitA = $bitA, $bitB = $bitB ); }
	expr $c _ $s;
}

template circuit:full-adder ( $bitA = "0", $bitB = "0", $carryIn = "0" ) {
	var $pass1 = { call circuit:half-adder ( $bitA = $bitA, $bitB = $bitB ); }
	var $pass2 = { call circuit:half-adder ( $bitA = substring($pass1, 2, 1), $bitB = $carryIn ); }
	var $carryOut = { call logical:or ( $bitA = substring($pass1, 1, 1), $bitB = substring($pass2, 1, 1) ); }
	
	expr $carryOut _ substring($pass2, 2, 1);
}


template logical:and ( $bitA = "0", $bitB = "0" ) {
	if ($bitA == "1" && $bitB == "1") {
		expr "1";
	}
	else {
		expr "0";
	}
}

template logical:or ( $bitA = "0", $bitB = "0" ) {
	if ($bitA == "1" || $bitB == "1") {
		expr "1";
	}
	else {
		expr "0";
	}
}

template logical:nand ( $bitA = "0", $bitB = "0" ) {
	if ($bitA == "0" && $bitB == "0") {
		expr "1";
	}
	else {
		expr "0";
	}
}

template logical:nor ( $bitA = "0", $bitB = "0" ) {
	if ($bitA == "0" || $bitB == "0") {
		expr "1";
	}
	else {
		expr "0";
	}
}

template logical:xor ( $bitA = "0", $bitB = "0" ) {
	if ($bitA != $bitB) {
		expr "1";
	}
	else {
		expr "0";
	}
}

template logical:xnor ( $bitA = "0", $bitB = "0" ) {
	if ($bitA == $bitB) {
		expr "1";
	}
	else {
		expr "0";
	}
}

template logical:not ( $bitA = "0" ) {
	if ($bitA == "0") {
		expr "1";
	}
	else {
		expr "0";
	}
}

